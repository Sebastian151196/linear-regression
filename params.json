{"name":"Linear-regression","tagline":"A simple linear regression machine learning program","body":"# linear-regression\r\nA simple linear regression machine learning program, written in Python 3.4.1\r\n\r\n## Dependencies\r\n* Python: https://www.python.org/\r\n* Numpy: http://www.numpy.org/\r\n* Docopt: http://www.docopt.org/\r\n\r\nYou should not have to install these manually if you follow the instructions under 'Installation'.\r\n## Installation\r\n1. Get the files within this repository. For example: git clone https://github.com/kylelin47/linear-regression.git\r\n2. Install [setuptools](https://pypi.python.org/pypi/setuptools)\r\n3. Navigate to where you saved this repository on your computer (you should see the file setup.py)\r\n4. Run\r\n```\r\n> setup.py install\r\n```\r\n## Training Sets and Testing Sets\r\nregress.py will use the training set to learn a weight matrix that it will apply to the attributes\r\nof each entry in the testing set to predict that entry's category. It will compare its prediction to\r\nthe actual category and see if its prediction is correct. After all entries are processed, it will report\r\nits overall accuracy.\r\n\r\nThe training set must contain at least one example of every category present in the testing set.\r\n\r\n## Data Format\r\nDelimiter separated numbers (as specified with the --delimiter flag. defaults to a comma),\r\nwith category being the first number. For example, with 3 categories,\r\nyou can represent each category as 1 2 or 3. Each entry should be on a new line.\r\n\r\nCategory must be an integer. Categories should be in sequence, though they do not have to start\r\nfrom 1.\r\n\r\nThe following data\r\n\r\n```\r\n1,5.1,3.5,1.4,0.2\r\n2,3.1,1.5,2.4,0.4\r\n```\r\n\r\nrepresents two entries, the first of category 1 and the second of category 2.\r\n\r\nExample data are in the data/iris and data/wine folders.\r\n\r\nEntries with a different number of attributes than the maximum in the training dataset are ignored. For example,\r\n\r\nTraining\r\n```\r\n1,5.1,3.5,1.4\r\n1,5.1,3.5,1.4,0.2\r\n2,3.1,1.5,2.4\r\n```\r\nTesting\r\n```\r\n1,5.7,4.4,1.5\r\n1,5.4,3.9,1.3,0.4\r\n1,5.1,3.5,1.4,0.3,0.7\r\n```\r\nwill be interpreted as\r\n\r\nTraining\r\n```\r\n1,5.1,3.5,1.4,0.2\r\n```\r\nTesting\r\n```\r\n1,5.4,3.9,1.3,0.4\r\n```\r\n\r\n## Example Usage\r\n```\r\n> regress.py TRAINING_SET TESTING_SET\r\nResults:  correct/total\r\nAccuracy: n%\r\n\r\n> regress.py TRAINING_SET TESTING_SET --weight\r\nW =\r\n[[W1]\r\n [W2]\r\n  .\r\n  .\r\n  .\r\n [Wm]]\r\nResults:  correct/total\r\nAccuracy: n%\r\n\r\n> regress.py TRAINING_SET TESTING_SET --verbose\r\nCategory 1: correct/total, %\r\nCategory 2: correct/total, %\r\n.\r\n.\r\n.\r\nCategory N: correct/total, %\r\nResults:  correct/total\r\nAccuracy: n%\r\n\r\n> regress.py TRAINING_SET TESTING_SET --delimiter=\" : \"\r\nResults:  correct/total\r\nAccuracy: n%\r\n```\r\n--delimiter=\" : \" means your data looks like\r\n```\r\n1 : 0.7 : 0.9 : 2.5\r\n```\r\n--delimiter=, means your data looks like\r\n```\r\n1,0.7,0.9,2.5\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}